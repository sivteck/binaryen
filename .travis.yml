sudo: required
dist: trusty
language: cpp

stages:
  - name: test
  - name: build
    # Don't run build stage for pull requests and other branches than master
    # to save time and resources.
    # if: type != pull_request AND (branch = master OR tag IS present)

jobs:
  include:
    # Build with gcc 6.3 and run tests on Alpine Linux (inside chroot).
    # Note: Alpine uses musl libc.
    - &test-alpine
      stage: test
      sudo: true
      language: minimal
      compiler: gcc
      env: ARCH=aarch64
      before_install:
        - docker run --rm --privileged multiarch/qemu-user-static:register --reset
        - docker run -w /src --name alpine -v $(pwd):/src -dit multiarch/alpine:aarch64-latest-stable /bin/sh -c "pwd"
          #- docker run -w /src -dit --name alpine -v $(pwd):/src arm64v8/node:10-alpine
        - alpine() { docker exec -it alpine "$@"; }
      install:
        - alpine apk update
        - alpine apk add nodejs-current build-base cmake git python2
      script:
        - alpine cmake .
        - alpine make -j2
        - alpine ./check.py

    # Build statically linked release binaries with gcc 6.3 on Alpine Linux
    # (inside chroot). If building a tagged commit, then deploy release tarball
    # to GitHub Releases.
    - &build-alpine
      <<: *test-alpine
      stage: build
      env: ARCH=x86_64
      # Don't run before_script inherited from *test-alpine.
      before_script: skip
      script:
        - alpine cmake -DCMAKE_BUILD_TYPE=Release
                       -DCMAKE_VERBOSE_MAKEFILE=ON
                       -DCMAKE_CXX_FLAGS="-static -no-pie"
                       -DCMAKE_C_FLAGS="-static -no-pie" .
        - alpine make -j2
        - alpine find bin/ -type f -perm -u=x -exec strip {} +
        - alpine ls -lh bin/
        # Check if the built executables are really statically linked.
        - if [ -n "$(find bin/ -type f -perm -u=x -exec file {} + | grep -Fvw 'statically linked')" ]; then
              file bin/*; false;
          fi

    # Build binaries for other architectures using QEMU user-mode emulation.
    # Note: We don't run tests for these architectures, because some fail under
    #       QEMU/binfmt and it takes too long time (hits time limit on Travis).
    # Note: We had to remove ppc64le, because it takes more than 50 minutes
    #       (Travis limit) to build. :(
    #    - <<: *build-alpine
    #      env: ARCH=x86
    #
    #    - <<: *build-alpine
    #      env: ARCH=aarch64
    #
    #    - <<: *build-alpine
    #      env: ARCH=armhf
    #
notifications:
  email: false
